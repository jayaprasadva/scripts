#!/bin/sh
# Run badblocks on a cryptsetup layer.
# Badblocks random will write a repetitive pattern of 2 * 64 * 1024
# (2 * blocks_at_once * block_size) by default and compare each "page" against
# this random pattern. This means that badblocks is not intended for secure
# erasing by itself. Thats why ypid combined it with cryptsetup in this script.

# Copyright (C) 2015-2020 Robin Schneider <ypid@riseup.net>
# SPDX-FileCopyrightText: 2015-2017,2020-2021 Robin Schneider <ypid@riseup.net>
#
# SPDX-License-Identifier: AGPL-3.0-only

set -e

dev="$1"
cryptsetup_dev_name="${2:-tmp_delete}"
cryptsetup_dev_path="/dev/mapper/$cryptsetup_dev_name"

if [ ! -b "$dev" ]
then
    echo "Usage: $0 <device_path> [ <dev_mapper_target> ]" >&2
    exit 1
fi

if [ -b "$cryptsetup_dev_path" ]
then
    echo "Cannot format device $dev which is still in use." >&2
    echo "You might want to run:" >&2
    echo "cryptsetup close $cryptsetup_dev_name" >&2
    exit 1
fi

printf '%s' "Are you sure to securely erase *all* data on $dev and test the device with badblocks? (Type uppercase yes): "
read -r erase
if [ "$erase" != 'YES' ]
then
    exit 1
fi

# printf '%s\n' "$random_key" | cryptsetup --iter-time 1 --hash sha512 --key-size 512 luksFormat "$dev"
## https://github.com/mbroz/cryptsetup/blob/d7d76e72f7057e776ea1cb8679a8c682cbdf0113/FAQ#L773
cryptsetup open --type plain --cipher aes-xts-plain64 --key-file /dev/random "$dev" "$cryptsetup_dev_name"
badblocks -wsv -t random -b 4096 "$cryptsetup_dev_path"
sync
sleep 2
cryptsetup close "$cryptsetup_dev_name"
# dd if=/dev/urandom bs=1024 count=10 iflag=fullblock of="$dev"
