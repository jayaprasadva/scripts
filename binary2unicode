#!/usr/bin/env python
# encoding: utf-8
# @licence AGPL-3.0-only <https://www.gnu.org/licenses/agpl-3.0.html>
# @author Copyright (C) 2015 Robin Schneider <ypid@riseup.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, version 3 of the
# License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

__version__ = '0.6'

import logging
import re

def bin2unicode(bin_string):
    remaining_char_index = None
    strings_array = []
    for match in re.finditer(r'(?P<binary_number>\d{8})', bin_string):
        number = int(match.group('binary_number'), 2)
        strings_array.append(unicode(unichr(number)))
        remaining_char_index = match.end()
    number_of_remaining_chars = 0
    if type(remaining_char_index) == 'int':
        number_of_remaining_chars = len(bin_string) - remaining_char_index
    if number_of_remaining_chars > 0:
        logging.warning(u"Number of remaining characters: {}".format(number_of_remaining_chars))
        logging.warning(u"Remaining characters: {}".format(bin_string[remaining_char_index:]))
    return u''.join(strings_array)

if __name__ == '__main__':
    from argparse import ArgumentParser

    args = ArgumentParser(
        description=u"Convert binary numbers to ASCII representation",
        # epilog=__doc__
    )
    args.add_argument(
        '-V',
        '--version',
        action='version',
        version='%(prog)s {version}'.format(version=__version__)
    )
    args.add_argument(
        'file',
        help=u"Path to file",
    )
    user_parms = args.parse_args()

    logging.basicConfig(
        format='%(levelname)s: %(message)s',
        level=logging.DEBUG,
        # level=logging.INFO,
    )

    logging.debug(u"Parsing file: {}".format(user_parms.file))
    with open(user_parms.file, 'r') as f:
        for line in f:
            print bin2unicode(line.rstrip(u'\n'))
