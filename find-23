#!/usr/bin/env perl

# SPDX-FileCopyrightText: 2012 Robin Schneider <ypid@riseup.net>
#
# SPDX-License-Identifier: AGPL-3.0-only

use strict;
use warnings;
use autodie;
use feature qw(say);
use utf8;
use experimental 'smartmatch';
use open qw(:std :utf8);
binmode STDOUT, ':encoding(UTF-8)';

use Term::ANSIColor;
use Const::Fast;

const my @special_numbers => 23, 42;
const my $text => join q{ }, @ARGV;

sub match {
    my $sum = shift;
    if ( $sum ~~ @special_numbers ) {
        print colored( "Match\t", 'blue' );
    }
}

my $wordsum        = 0;
my $how_many_words = 0;
for my $word ( split /\W/xms, $text ) {
    my $charsum = 0;
    for my $char ( split //xms, $word ) {
        my $sum = ord( uc $char ) - 64;
        if ( 0 >= $sum or $sum > 26 ) {
            warn "$char is not a letter";
            next;
        }
        printf "%s: %2d\n", $char, $sum;
        $charsum += $sum;
    }
    match($charsum);
    print "$word:\t$charsum\n\n";
    $wordsum += $charsum;
    $how_many_words++;
}

if ( $how_many_words > 1 ) {
    match($wordsum);
    say qq('$text': $wordsum);
}
