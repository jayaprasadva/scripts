#!/bin/bash

# SPDX-FileCopyrightText: 2012 Robin Schneider <ypid@riseup.net>
#
# SPDX-License-Identifier: AGPL-3.0-only

config_datei="$HOME/.gis-osm-update.conf.sh"

###
help_exit (){ echo "„$0 --help“ gibt weitere Informationen.";exit 1; }
if [ -z "$1" ];then echo "Fehlender Parameter";help_exit;fi
### Funktionen
fail_parameter (){ echo "Falscher Parameter:\"$1\"";help_exit; }
display_version (){ echo "Version: 0.9 Beta"; }
display_shelp (){
echo "Automatisiert das Aufbauen und aktuell halten eines Spiegelservers der OpenStreetMap Datenbank.
Usage $0 [Optionen]
Optionen
 -D, --load-last-planetfile	Läd die komplette Planeten Datei herunter
 -s, --search			Sucht nach neuen OSM diff Datei
 -d, --download			Läd die neue(n) OSM diff Datei(en) herunter
 -l, --last			Läd die letzte diff Datei herunter
 -n, --num=			Läd die letzten n diffs herunter
 -t, --timestamp=		Läd die Datei, dessen Datum übergeben wurde [YYMMDD]
 -f, --force			Verzichtet auf den test ob die Datei schon bekannt ist (md5 hashes)
 -u, --update-db		Fürt nach dem erfolgreichen Download ein Update der Datenbank durch
 -c, --cron			Schreibt in eine logdatei

 -m, --make-conf		legt die Konfigurationsdateien an
 -h, --help			diese Hilfe anzeigen und beenden
 -v, --version  		Versionsinformation anzeigen und beenden"
}
make_config (){
if [ ! -s "$config_datei" ]
then	cat <<EOF > $config_datei
### Die einzelnen Verzeichnisse müssen nicht im gleichen Wurzelverzeichnis sein.
osm_file_dir=$HOME			### Wurzelverzeichnis
osm_new_file_dir=\${osm_file_dir}/new
osm_db_update_file_dir=\${osm_file_dir}/db-update
osm_tmp_file_dir=\${osm_file_dir}/tmp
osm_static_file_dir=\${osm_file_dir}/static
osm_log_file_dir=\${osm_static_file_dir}/log	### Nur im cron Modus relevant

s=20 	### gibt an wie viele changesets getestet werden ob schon vorhanden
osm_planet_server_dir="http://ftp5.gwdg.de/pub/misc/openstreetmap/planet.openstreetmap.org"	# Mirror von http://planet.openstreetmap.org
wget_baseopts="--random-wait -c"
### Parameter für osm2pgsql
osm2pgsql_opts="time ./osm2pgsql --create -S default.style -s -C 1900 -U gis -W -H 127.0.0.1"
EOF
echo "Bitte die config-Datei vor dem nächsten Programmaufruf editiren. Sie liegt unter $config_datei "
exit 1
fi
}

find_file (){
html_download
if [ -z "`grep "$1.osm.bz2" "${osm_tmp_file_dir}/planet.openstreetmap.org.html"`" ]
then	return 1
else	return 0
fi
}

find_new_file (){
html_download
for file in `awk '{print $6}' ${osm_tmp_file_dir}/planet.openstreetmap.org.html |grep 'href="changesets' |tail -n 3|head -n 1`
do	file=${file%.osm.bz2*\">*</a>}
	file=${file#href=\"changesets-}
	echo $file
done
}

find_n_files (){
oldest_diff=`cat ${osm_static_file_dir}/oldest_diff`
html_download
tailn=$(($1*2+2))
headn=$((tailn-2))
for file in `awk '{print $6}' ${osm_tmp_file_dir}/planet.openstreetmap.org.html |grep 'href="changesets' |tail -n $tailn|head -n $headn |sed -e '0~2d' |sort -r`
do	file=${file%.osm.bz2*\">*</a>}
	file=${file#href=\"changesets-}
	if [ "$oldest_diff" == "$file" ]
	then	break
	fi
	echo $file
done | sort
}

db_osm_update (){
mv "${osm_new_file_dir}/$1" "$osm_db_update_file_dir/$1"
if [ "$update_db" == "1" ]
then	echo $osm2pgsql_opts $1
	echo "$1" >> ${osm_static_file_dir}/in_db
	mv "$osm_db_update_file_dir/$1" "$osm_tmp_file_dir/$1"
else	if [ "$download_last_planetfile" == "1" ]
	then	echo "Das aktuelle Planetfile wurde erfolgreich heruntergeladen und mit md5 validiert. Es liegt in $osm_db_update_file_dir/$1"
	else	echo "Ein changeset wurde erfolgreich heruntergeladen und mit md5 validiert. Es liegt in $osm_db_update_file_dir/$1"
	fi
fi
}

md5sum_download (){
wget $wget_baseopts ${osm_planet_server_dir}/$1  -O ${osm_new_file_dir}/$1
}

file_download (){
wget $wget_baseopts ${osm_planet_server_dir}/$1  -O ${osm_new_file_dir}/$1
}
html_download (){
if [ -e "${osm_tmp_file_dir}/planet.openstreetmap.org.html" ]
then	find ${osm_tmp_file_dir}/planet.openstreetmap.org.html -type f -mtime +1 -exec rm {} \;
fi
if [ ! -e "${osm_tmp_file_dir}/planet.openstreetmap.org.html" ]
then	wget $wget_baseopts ${osm_planet_server_dir} -O ${osm_tmp_file_dir}/planet.openstreetmap.org.html
fi
if [ ! -s "${osm_tmp_file_dir}/planet.openstreetmap.org.html" ]
then	echo "Relevante Datei konnte nicht heruntergeladen werden"
	exit 1
fi
}
md5sum_force_false (){
if [ "$force" == "1" ]
then	return 0
else	md5sum_vorhanden $1 $2
	return $?
fi
}
md5sum_vorhanden (){
if [ ! -s "${osm_static_file_dir}/md5sums/$2.osm.bz2.all.md5" ]
then	return 0
fi
local oldest_diff=`cat ${osm_static_file_dir}/oldest_diff`

for i in `awk '{print $2}' ${osm_static_file_dir}/md5sums/$2.osm.bz2.all.md5`
do	if [ "$2-$1.osm.bz2" == "$i" ]
        then    return 1
        fi
done
return 0
}
md5sum_eintragen (){
md5sum_vorhanden $1 $2
if [ "$?" == "0" ]
then	cat ${osm_new_file_dir}/$2-$1.osm.bz2.md5 >> "${osm_static_file_dir}/md5sums/$2.osm.bz2.all.md5"
	mv "${osm_new_file_dir}/$2-$1.osm.bz2.md5" "${osm_static_file_dir}/md5sums/$2"
fi
}
md5sum_test (){
md5sum_download $2-$1.osm.bz2.md5
cd ${osm_new_file_dir}
if md5sum -c $2-$1.osm.bz2.md5 &> /dev/null
then	md5sum_eintragen $1 $2 >>/dev/null
	return 0
else	return 1
fi
}
download_osm_file (){
md5sum_force_false $1 $2
if [ "$?" == "0" ]
then	file_download $2-$1.osm.bz2
	md5sum_test $1 $2
	if [ "$?" == "0" ]
	then	if [ "$2" == "planet" ]
		then	echo $1 > ${osm_static_file_dir}/oldest_diff
		fi
		db_osm_update $2-$1.osm.bz2
	else	echo "Der Download ist nicht korrekt verlaufen respektive der md5 test ist fehlgeschlagen. Beginne neuen Download"
		rm ${osm_new_file_dir}/$2-$1.osm.bz2
		##download_osm_file $1 $2	##Problem endlos laden wenn wget No space left on device
	fi
else	echo "Die Datei $2-$1.osm.bz2 wurde bereits heruntergeladen"
fi
}
vergleiche_n_versionen (){
count=0
for file_n in `find_n_files $s`
do	md5sum_force_false $file_n changesets
	if [ "$?" == "0" ]
	then	count=$((count+1))
		if [ "$download" == "1" ]
		then	download_osm_file $file_n changesets
		else	echo $file_n
		fi
	fi
done
if [ "$download" != "1" ]
then	if [ "$count" -gt "0" ]
	then	if [ "$count" == "1" ]
		then	echo "Es ist eine neue Changesets Version verfügbar."
		else	echo "Es sind $count neue Changesets Version verfügbar."
		fi
	else	echo "Es sind keine neue Changesets Version verfügbar."
	fi
fi
}
test_data (){
if [ "`echo $1|wc -m`" == "7" ]
then	find_file "$1"
	if [ "$?" == 0 ]
	then	return 0
	else	echo "Es wurde keine Datei mit dem Datumsstempel \"$1\" auf den OSM-Servern veröffentlicht."
	fi
else	echo "Es müssen sechs Ziffern sein. Ihre eingabe war \"$1\" und dies sind $((`echo $1|wc -m`-1)) Ziffern."
fi
return 1
}
if_var_empty (){
if [ -z "$2" ]
then	echo "Der Parameter -$1 wurde ohne Argumente aufgerufen"
	exit 1
fi
}
if_var_number (){
if [ "$2" -lt "1" ]
then	echo "$1 ($2) muss größergleich 1 sein."
	exit 1
fi
}
if_var_n (){
if_var_empty n $1
if_var_number n $1
if [ -n "$n" ]
then	echo "Es kann nur ein -n übergeben werde und nicht zusammen mit -l"
	exit 1
fi
n=$1
}
if_var_t (){
if [ -n "$t" ]
then	echo "Es kann nur ein -t übergeben werde."
	exit 1
fi
test_data $1
if [ ! "$?" == "0" ]
then	exit 1
fi
t=$1
}
### Ende Funktionen
### Parameter Auswertung
while [ $# -ge 1 ]
do	case $1 in
	-D | --load-last-planetfile	) download_last_planetfile=1 		; shift		;;
	-s | --search			) search=1				; shift		;;
	-d | --download			) download=1				; shift		;;
	-n 				) if_var_n $2				; shift ; shift	;;
	--num=*				) t_n=${1#--num=};if_var_n $t_n		; shift		;;
	-t				) if_var_t $2				; shift ; shift	;;
	--timestamp=*			) t_t=${1#--timestamp=};if_var_t $t_t	; shift		;;
	-l | --last			) if_var_n_empty 1			; shift		;;
	-c | --cron			) cron=1				; shift		;;
	-m | --make-conf		) make_conf=1				; shift		;;
	-f | --force			) force=1				; shift		;;
	-u | --update-db		) update_db=1				; shift		;;
	-v | --version			) display_version			; exit 1	;;
	-h | --help			) display_shelp				; exit 1	;;
	*				) fail_parameter "$1"			; exit 1	;;
	esac
done
### Ende Parameter Auswertung
### If Abfragen/Programmablauf
if [ "$make_conf" == "1" ]
then	make_config
fi
if [ -s "$config_datei" ]
then	. $config_datei
	mkdir -p "$osm_tmp_file_dir" "$osm_new_file_dir" "$osm_static_file_dir/md5sums/planet" "$osm_static_file_dir/md5sums/changesets" "$osm_db_update_file_dir"
else	echo "Die Configationsdatei konnte nicht geladen werden. Bitte benutzen sie den Parameter -c oder --make-conf"
	exit 1
fi
(
if [ "$download_last_planetfile" == "1" ]
then	download_osm_file "`find_new_file`" planet
fi
if [ ! -s "${osm_static_file_dir}/oldest_diff" ]
then	echo "Bitte geben sie die Version der OSM Daten mit der die lokale Datenbank arbeitet an [YYMMTT] oder bauen sie eine OSM DB komplett neu auf mit -D"
	if [ "$cron" == "1" ]
	then	echo "Die Interaktive eingabe ist im cron modus nicht möglich. Bitte ohne -c, --cron aufrufen."
		exit 1
	fi
	while true
	do	read oldest_diff
		test_data $oldest_diff
		if [ "$?" == "0" ]
		then	echo OK
			break
		fi
	done
	echo $oldest_diff > ${osm_static_file_dir}/oldest_diff
fi
if [ ! -s "${osm_static_file_dir}/oldest_diff" ]
then	echo 'Es ist noch unbekannt, mit welcher Version der OSM Daten die lokale Datenbank arbeitet. Bitte editiren sie dies mit -C oder fürhen sie "-D" aus um das aktuelle Planetfile zu Downloaden und damit die DB aufzubauen.'
	exit 1
fi
if [ "$update_db" == "1" ]
then	for i in `ls $osm_db_update_file_dir`
	do	db_osm_update $i
	done
fi
if [ -n "$search" ]
then	vergleiche_n_versionen $s
fi
if [ -n "$t" ]
then	download_osm_file $t changesets
fi
if [ -n "$n" ]
then	for i in `find_n_files $n`
	do	download_osm_file $i changesets
	done
fi
) |	if [ "$cron" == "1" ]
	then	monat=`date +%m`
		mkdir -p "$osm_log_file_dir/$monat"
		tag=`date +%d`
		echo -e "********************************\n`date`" >> $osm_log_file_dir/$monat/$tag.log
		cat >> $osm_log_file_dir/$monat/$tag.log 2>> $osm_log_file_dir/$monat/$tag.err
		date >> $osm_log_file_dir/$monat/$tag.log
	else	cat
	fi
### Ende If Abfragen/Programmablauf
exit 0
