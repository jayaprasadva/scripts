#!/bin/bash

# SPDX-FileCopyrightText: 2013 Robin Schneider <ypid@riseup.net>
#
# SPDX-License-Identifier: AGPL-3.0-only

## default config
config_dir="$HOME/.xpodget"
log_dir="$config_dir/Log/`date +%Y/%m`"
config_file="$config_dir/xpodget.conf"
rss_script="$config_dir/generate-rss-podcast-feed"
web_server_log_script="$config_dir/mv-old-web_server_log"
rss_file_name="podcast.rss"
local_podcast_feed_overview="$config_dir/overview.html"
local_podcast_feed_opml="$config_dir/overview.opml"

###
help_exit (){ echo "„$0 --help“ to get more information"; exit $1; }
if [ -z "$1" ];then echo "Missing parameter"; help_exit 1;fi
### Funktionen
fail_parameter (){ echo "Wrong parameter: \"$1\""; help_exit 1; }
display_version (){ echo "Version: 1.3.1"; }
display_shelp (){
echo "Usage $0 [options]
Options
 -c, --cron			Writes everything to a log file
 -m, --make-config		Creates the config file
 -r, --remove			Removes empty directories
 -o, --mv-old			Moves familiar podcasts
 -w, --web-server-log		Parse the web server logs an move files downloaded by a specific device
 -u, --update			Updates the local podcast database
 -d, --download			Downloads new podcast episodes
 -g, --gen-rss			Generate RSS feeds for all directories. This requires the script generate-rss-podcast-feed and the CPAN module MP3::Podcast
 -a, --all			Equal to \"-o -w -u -d -g\"
 -h, --help			Shows this help text
 -v, --version  		Shows the version of this program"
}

make_config (){
if [ -e "$config_file" ]; then
	echo "The config file already exists ($config_file)"
	exit 1
fi

mkdir -p "$config_dir"
echo 'podcasts="$HOME/podcasts"
podcasts_familiar="$HOME/podcasts_familiar"
rss_script="$config_dir/generate-rss-podcast-feed"
base_url="http://domain.tld"	## if you want to distribute your podcasts in your intranet with RSS feeds' > "$config_file"
}

remove_empty_dirs (){
find "$podcasts" "$podcasts_familiar" -type d -empty -delete
for poddir in "$podcasts"/* "$podcasts_familiar"/*; do
	if [ -e "$poddir/$rss_file_name" ] && [ "`ls -1 $poddir|wc -l`" == 1 ]; then
		rm "$poddir/$rss_file_name"
	fi
done
find "$podcasts" "$podcasts_familiar" -type d -empty -delete
}

### Ende Funktionen
### Parameter Auswertung
while [ $# -ge 1 ]
do	case $1 in
	-c | --cron		) cron=1							; shift		;;
	-m | --make-config	) make_config							; exit 0	;;
	-r | --remove		) remove_empty_dirs=1						; shift		;;
	-o | --mv-old		) remove_empty_dirs=1;mv_old=1					; shift		;;
	-w | --web-server-log	) remove_empty_dirs=1;mv_old_web=1				; shift		;;
	-u | --update		) update=1							; shift		;;
	-d | --download		) download=1							; shift		;;
	-g | --gen-rss		) remove_empty_dirs=1;mv_old=1;gen_rss=1							; shift		;;
	-a | --all		) update=1;download=1;remove_empty_dirs=1;mv_old=1;
				mv_old_web=1;gen_rss=1						; shift		;;
	-v | --version		) display_version						; exit 0	;;
	-h | --help		) display_shelp							; exit 0	;;
	*			) fail_parameter "$1"							;;
	esac
done

(

if [ -f "$config_file" ]; then
	source $config_file
else
	echo "Unable to read the config file."
	echo "Use \"$0 -m\" to create it under \"$config_file\""
	exit 1
fi

if [ "$podcasts" == "" ]; then
	echo "Variable \"podcasts\" is empty."
	echo "Please edit $config_file"
	exit 1
fi
if [ "$podcasts_familiar" == "" ]; then
	echo "Variable \"podcasts_familiar\" is empty."
	echo "Please edit $config_file"
	exit 1
fi

if [ "$mv_old" == 1 ]; then
	find "$podcasts" -type d -name "familiar" -not -empty|while read dir
	do	casttitle=${dir#$podcasts/}
		casttitle=${casttitle%/familiar}
		mkdir -p "$podcasts_familiar/$casttitle"
		mv -nv "$dir"/* "$podcasts_familiar/$casttitle"
	done
fi

if [ "$mv_old_web" == 1 ]; then
	$web_server_log_script
fi

if [ "$remove_empty_dirs" == 1 ]; then
	remove_empty_dirs
	ls -1 "$podcasts"|while read dir; do
		mkdir -p "$podcasts/$dir/familiar"
	done
fi

if [ "$update" == 1 ]; then
	HOME_old="$HOME"
	hpodder update
	export HOME="$HOME/.hpodder-diff-home"
	hpodder update
	export HOME="$HOME_old"
fi

if [ "$download" == 1 ]; then
	HOME_old="$HOME"
	hpodder download
	export HOME="$HOME/.hpodder-diff-home"
	hpodder download
	export HOME="$HOME_old"
fi

if [ "$gen_rss" == 1 ]; then
	rm -f "$local_podcast_feed_overview" "$local_podcast_feed_opml"
	echo "<html><head><title>Podcast overview</title></head><body><h1>Podcast overview</h1><ul>" >> "$local_podcast_feed_overview"
	echo '<?xml version="1.0" encoding="utf-8"?><opml version="1.1"><head><title>Podcast overview</title></head><body>' >> "$local_podcast_feed_opml"
	for poddir in "$podcasts"/* "$podcasts_familiar"/*; do
		podname=${poddir##*/}		## name of the podcast
		podpath=${poddir%/*}		## like /home/podcast/podcasts
		podserverdir=${podpath##*/}	## like podcasts_familiar
		url="$base_url/$podserverdir/$podname/$rss_file_name"
		$rss_script "$podpath" "$base_url/$podserverdir" "$podname" "$podname ($podserverdir)" > "$poddir/$rss_file_name"
		echo "<li><a href=\"$url\" alt=\"$podname\">" >> "$local_podcast_feed_overview"
		echo "$podname ($podserverdir)</a></li>" >> "$local_podcast_feed_overview"
		echo "<outline title=\"$podname\" text=\"$podserverdir: $podname\" type=\"rss\" xmlUrl=\"$url\" />" >> "$local_podcast_feed_opml"
	done
	echo "</body></html>" >> "$local_podcast_feed_overview"
	echo "</body></opml>" >> "$local_podcast_feed_opml"
fi

) |	if [ "$cron" == 1 ]; then
		mkdir -p "$log_dir"
		echo -e "********************************\n`date`" >> "$log_dir/`date +%d`.log"
		cat >> "$log_dir/`date +%d`.log" 2>> "$log_dir/`date +%d`.err"
		date >> "$log_dir/`date +%d`.log"
	else	cat
	fi
exit 0
