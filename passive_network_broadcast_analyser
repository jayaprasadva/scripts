#!/usr/bin/env python
# -*- coding: utf-8 -*-

# SPDX-FileCopyrightText: 2015-2016 Robin Schneider <ypid@riseup.net>
#
# SPDX-License-Identifier: AGPL-3.0-only

"""
Analyse broadcast network traffic and gather information about hosts contained in the stream.
Interesting information includes the hostname, the mac address and current IP address(es).
The data is gathered from DHCPv4 and Netbios traffic.
This information is stored in an JSON file. Export options for /etc/hosts and /etc/ethers file format exist.
"""

__version__ = '0.12'

# modules {{{
# std {{{
import logging
import json
import io
import os
import re
import signal
import sys
from datetime import datetime
# from socket import inet_aton
# }}}

from prettytable import PrettyTable
# }}}

logging.getLogger("scapy.runtime").setLevel(logging.ERROR)  # Gets rid of IPV6 Error when importing scapy
from scapy.all import Ether, BOOTP, DHCP, DHCPTypes, NBTDatagram, sniff


class NetworkTrafficParser:
    _results = dict()
    _last_seen = dict()
    _initial_time = None

    def __init__(
        self,
        states_file=None,
        timeout=15,
    ):

        self._states_file = None
        if states_file:
            self._states_file = io.open(states_file, 'w', encoding='utf-8')
            self._timeout = timeout * 60  # in seconds

    def _packet_from_client(self):
        if self._resp.haslayer(BOOTP):
            return {
                1: True,
                2: False,
            }[self._resp[BOOTP].op]

    def _get_dhcp_option(self, options, option_name):
        for option in options:
            if type(option) is tuple:
                if option[0] == option_name:
                    return option[1]
        # if self._resp[DHCP].options[12] is tuple:

    def _add_result(self, key, value, origin):
        value = value.strip()

        if self._mac_addr not in self._results:
            self._results[self._mac_addr] = {}

        if key in self._results[self._mac_addr]:
            if self._results[self._mac_addr][key] == value:
                pass
            elif self._results[self._mac_addr][key].lower() == value.lower():
                logging.debug(
                    u"Ignore new value \"{}\" and keep \"{}\" for {} (origin: {})".format(
                        value,
                        self._results[self._mac_addr][key],
                        key,
                        origin,
                    ) + u"(only difference is case of the characters)"
                )
            else:
                logging.debug(
                    u"Replace \"{}\" with new value \"{}\" for {} (origin: {})".format(
                        self._results[self._mac_addr][key],
                        value,
                        key,
                        origin,
                    )
                )
                self._add_raw_result(key, value, origin)
        else:
            logging.debug(
                u"Set \"{}\" for {} (origin: {})".format(
                    value,
                    key,
                    origin,
                )
            )
            self._add_raw_result(key, value, origin)

    def _add_raw_result(self, key, value, origin):
        if '_sources' not in self._results[self._mac_addr]:
            self._results[self._mac_addr]['_sources'] = {}

        self._results[self._mac_addr][key] = value
        self._results[self._mac_addr]['_sources'][key] = origin

    def _add_dhcp_option_to_result(self, option_name):
        if self._get_dhcp_option(self._resp[DHCP].options, option_name):
            self._add_result(
                option_name,
                self._get_dhcp_option(self._resp[DHCP].options, option_name),
                'dhcp {}'.format(option_name),
            )

    def _add_bootp_option_to_result(self, option_name):
        """Does not work?"""
        if self._resp[BOOTP][option_name] != '0.0.0.0':
            self._add_result(
                option_name,
                self._resp[BOOTP][option_name],
                'bootp {}'.format(option_name),
            )
            return True
        else:
            return False

    def get_results(self):
        return unicode(
            json.dumps(
                self._results,
                indent=4,
                ensure_ascii=False,
                sort_keys=True,
                separators=(',', ':'),
            )
        )

    def load_from_json(self, filename):
        logging.info(u"Loading file {}".format(filename))
        try:
            with io.open(filename, 'r', encoding='utf-8') as f:
                self._results = json.load(f)
        except:
            # self._results = {}
            pass

    def save_as_json(self, filename):
        logging.info(u"Saving results to file {}".format(filename))
        with io.open(filename, 'w', encoding='utf-8') as f:
            f.write(self.get_results() + u'\n')

    def save_as_ethers_file(
        self,
        filename,
        name_prefix='',
        hostname_prefix='',
        ip_prefix='',
        include_ho_hostname=False,
        files_d=None,
    ):

        logging.info(u"Saving results to ethers file {}".format(filename))
        with io.open(filename, 'w', encoding='utf-8') as f:
            if files_d:
                self.__run_parts_include(files_d, f)
            f.write(u"# Begin entries generated by {} {{{{{{\n".format(os.path.basename(__file__)))
            # Maybe use IP address sorting? key=lambda item: socket.inet_aton(item[0])]
            for mac_addr in sorted(self._results):
                if 'hostname' in self._results[mac_addr]:
                        f.write(
                            u'{} {}\n'.format(
                                mac_addr,
                                self._get_name_for_mac(mac_addr, name_prefix, hostname_prefix),
                            )
                        )
                elif include_ho_hostname and 'ip_addr' in self._results[mac_addr]:
                    f.write(
                        u'{} {}\n'.format(
                            mac_addr,
                            ip_prefix + self._results[mac_addr]['ip_addr'],
                        )
                    )
                else:
                    logging.debug(u"No hostname for mac address {} found".format(
                        mac_addr,
                        )
                    )
            f.write(u"# End of entries generated by {} }}}}}}\n".format(os.path.basename(__file__)))

    def load_from_hosts_file(self, filename):
        """
        With the current internal data representation (mac address is the key),
        this function does not make much sense.
        """
        logging.info(u"Importing file {}".format(filename))
        with io.open(filename, 'r', encoding='utf-8') as f:
            for line in f:
                if re.match(r'\s*#', line):
                    continue

                ip_addr, hostname = None, None
                try:
                    ip_addr, hostname = line.split()
                except:
                    logging.warning(u"Could not parse line: {}".format(line))
                    continue

                logging.debug(u'{}: {}'.format(ip_addr, hostname))

                self._add_result(
                    'ip_addr',
                    ip_addr,
                    'User hosts file',
                )
                self._add_result(
                    'hostname',
                    hostname,
                    'User hosts file',
                )

    def __run_parts_include(self, dir_name, f):
        # FIXME: Make other parts of the script Unicode safe.
        dir_name = dir_name.decode('utf-8')
        if not os.path.isdir(dir_name):
            logging.warning(u"{} is not a directory".format(dir_name))
        else:
            for dirname, dirnames, filenames in os.walk(dir_name):
                for filename in sorted(filenames):
                    include_file = os.path.join(dirname, filename)
                    f.write(u"# Begin of file \"{}\" {{{{{{\n".format(include_file))
                    with io.open(include_file, 'r', encoding='utf-8') as s:
                        f.write(s.read())
                    f.write(u"# End of file \"{}\" }}}}}}\n".format(include_file))

        f.write(u'\n')

    def _get_ip_addr_for_mac(self, mac_addr):
        if 'ip_addr' in self._results[mac_addr]:
            return self._results[mac_addr]['ip_addr']
        elif 'requested_addr' in self._results[mac_addr]:
            return self._results[mac_addr]['requested_addr']
        return u''

    def _get_name_for_mac(self, mac_addr, name_prefix='', hostname_prefix=''):
        if 'hostname' in self._results[mac_addr]:
            hostname = self._results[mac_addr]['hostname']
            if '_description' in self._results[mac_addr]:
                hostname = name_prefix + self._results[mac_addr]['_description'] + hostname_prefix + hostname
            return hostname.replace(', ', '_').replace(' ', '_')
        else:
            return u''

    def save_as_hosts_file(
        self,
        filename,
        name_prefix='',
        hostname_prefix='',
        files_d=None,
    ):

        logging.info(u"Saving results to hosts file {}".format(filename))
        with io.open(filename, 'w', encoding='utf-8') as f:
            f.write(u"# Do not edit this file. It can be regenerated by passive_network_broadcast_analyser\n")
            if files_d:
                self.__run_parts_include(files_d, f)
            f.write(u"# Begin entries generated by {} {{{{{{\n".format(os.path.basename(__file__)))
            for mac_addr in sorted(self._results):
                if 'hostname' in self._results[mac_addr] and 'ip_addr' in self._results[mac_addr]:
                        f.write(u'{}\t{}\n'.format(
                            self._results[mac_addr]['ip_addr'],
                            self._get_name_for_mac(mac_addr, name_prefix, hostname_prefix),
                            )
                        )
                else:
                    logging.debug(u"No {} for mac address {} found.".format(
                        'hostname' if 'hostname' in self._results[mac_addr] else 'ip_addr',
                        mac_addr,
                        )
                    )
            f.write(u"# End of entries generated by {} }}}}}}\n".format(os.path.basename(__file__)))

    def _write_stats_file(self):
        columns = [
            u"Hostname",
            u"Last seen",
            u"IP Address",
            u"MAC address",
        ]
        table = PrettyTable(
            columns,
        )
        for column in columns:
            table.align[column] = "l"

        hosts_included_in_last_seen = False
        for mac_addr in self._last_seen:
            if self._last_seen[mac_addr] < self._initial_time:
                self._initial_time = self._last_seen[mac_addr]
            if self._last_seen[mac_addr] - self._initial_time < self._timeout:
                # logging.debug(u"In")
                table.add_row([
                    self._get_name_for_mac(mac_addr),
                    datetime.fromtimestamp(self._last_seen[mac_addr]).strftime('%Y-%m-%d %H:%M:%S'),
                    self._get_ip_addr_for_mac(mac_addr),
                    mac_addr,
                ])
                hosts_included_in_last_seen = True
            # else:
                # logging.debug(u"Out")
        if hosts_included_in_last_seen:
            # print(chr(27) + "[2J")
            print(table)
            # print(u'\n')

    def _update_last_seen(self):
        if self._states_file:
            if not self._initial_time:
                self._initial_time = self._resp.time
            if self._mac_addr in self._results:
                # if self._mac_addr not in self._last_seen:
                    # logging.debug(
                        # datetime.fromtimestamp(
                            # self._last_seen[self._mac_addr].strftime('%Y-%m-%d %H:%M:%S')
                        # )
                    # )
                    # logging.debug(datetime.fromtimestamp(int(self._resp.time)).strftime('%Y-%m-%d %H:%M:%S'))
                self._last_seen[self._mac_addr] = int(self._resp.time)
                self._write_stats_file()

    def parse(self, resp):
        self._resp = resp

        if not self._resp.haslayer(Ether):
            # logging.debug(u"Found non Ethernet frame: {}".format(self._resp.summary()))
            pass
        else:
            self._mac_addr = self._resp[Ether].src

            if self._resp.haslayer(DHCP):
                # Error checking {{{
                if self._resp[BOOTP].hlen != 6:
                    logging.warning(
                        u"Hardware address length is not 6 bytes as usual for Ethernet."
                        " It is {}.".format(self._resp[BOOTP].hlen))
                # }}}

                if self._mac_addr not in self._results:
                    self._results[self._mac_addr] = {
                        'xid': self._resp[BOOTP].xid,
                    }

                if self._packet_from_client():

                    self._add_dhcp_option_to_result('hostname')
                    if self._resp[BOOTP].yiaddr != '0.0.0.0':
                        self._add_result(
                            'ip_addr',
                            self._resp[BOOTP].yiaddr,
                            'bootp yiaddr',
                        )
                    else:
                        self._add_dhcp_option_to_result('requested_addr')
                else:
                    if self._resp[BOOTP].siaddr != '0.0.0.0':
                        self._add_result(
                            'ip_addr',
                            self._resp[BOOTP].siaddr,
                            'bootp siaddr',
                        )

                if self._resp[DHCP].options[0][1] in DHCPTypes:
                    logging.info(
                        u"Got DHCP {} (code: {}) from {}: mac {}, IP {}, xid: {}".format(
                            DHCPTypes[self._resp[DHCP].options[0][1]],
                            self._resp[DHCP].options[0][1],
                            'client' if self._packet_from_client() else 'server',
                            self._mac_addr,
                            self._get_ip_addr_for_mac(self._mac_addr),
                            hex(self._results[self._mac_addr]['xid']) if 'xid' in self._results[self._mac_addr] else 'None',
                        )
                    )
                else:
                    logging.debug(
                        u"Got DHCP with unknown code (probably plain BOOTP, ignoring): {}, {}, {}".format(
                            self._resp[DHCP].options[0][1],
                            self._mac_addr,
                            self._resp[DHCP].options,
                        )
                    )
                    logging.debug(u"Details: {}".format(self._resp.summary()))
                    # sys.exit(1)

                # logging.info(self._resp[DHCP].options)
                print('')
            elif self._resp.haslayer(NBTDatagram):
                if 'SourceName' in self._resp[NBTDatagram].fields:
                    self._add_result(
                        'hostname',
                        self._resp[NBTDatagram].fields['SourceName'],
                        'NETBIOS SourceName',
                    )
                if 'SourceIP' in self._resp[NBTDatagram].fields:
                    self._add_result(
                        'ip_addr',
                        self._resp[NBTDatagram].fields['SourceIP'],
                        'NETBIOS SourceIP',
                    )

            self._update_last_seen()


def do_final_stuff():
    if args.print_results:
        print(n.get_results())

    if args.json_file:
        n.save_as_json(args.json_file)

    if args.ethers_file:
        n.save_as_ethers_file(
            args.ethers_file,
            name_prefix=args.name_prefix,
            hostname_prefix=args.hostname_prefix,
            ip_prefix=args.ip_prefix,
            include_ho_hostname=args.no_hostname,
            files_d=args.ethers_file_d,
        )

    if args.hosts_file:
        n.save_as_hosts_file(
            args.hosts_file,
            name_prefix=args.name_prefix,
            hostname_prefix=args.hostname_prefix,
            files_d=args.hosts_file_d,
        )

# main {{{
if __name__ == '__main__':
    from argparse import ArgumentParser

    # Script Arguments {{{
    args_parser = ArgumentParser(
        description=__doc__,
        # epilog=__doc__,
    )
    args_parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s {version}'.format(version=__version__)
    )
    args_parser.add_argument(
        '-d', '--debug',
        help="Print lots of debugging statements",
        action="store_const", dest="loglevel", const=logging.DEBUG,
        default=logging.WARNING,
    )
    args_parser.add_argument(
        '-v', '--verbose',
        help="Be verbose",
        action="store_const", dest="loglevel", const=logging.INFO,
    )
    args_parser.add_argument(
        '-i', '--interface',
        help=u"Interface name to sniff on.",
    )
    args_parser.add_argument(
        '-f', '--file',
        help=u"Pcap file to read as input.",
    )
    args_parser.add_argument(
        '-j', '--json-file',
        help=u"Load/save results in a JSON file.",
    )
    args_parser.add_argument(
        '-p', '--print-results',
        action='store_true',
        default=False,
        help=u"Print results as JSON to stdout.",
    )
    args_parser.add_argument(
        '-l', '--live',
        help=u"Enter live mode."
             " Show all devices which are currently online."
             " This parameter excepts a filename to which the last seen times will be written.",
    )
    args_parser.add_argument(
        '-t', '--timeout',
        default=15,
        help=u"Timeout in minutes for live mode."
             " Only consider devices as online, when a packet was received in the last n minutes.",
    )
    args_parser.add_argument(
        '-e', '--ethers-file',
        help=u"Save to ethers file.",
    )
    args_parser.add_argument(
        '-E', '--ethers-file-d',
        help=u"When saving to ethers file, paste in the contents of each file found in the given directory.",
    )
    args_parser.add_argument(
        '-o', '--hosts-file',
        help=u"Save to hosts file.",
    )
    args_parser.add_argument(
        '-O', '--hosts-file-d',
        help=u"When saving to hosts file, paste in the contents of each file found in the given directory.",
    )
    # args_parser.add_argument(
    #     '-r',
    #     '--import-hosts',
    #     help=u"Import hosts file into JSON 'database'.",
    # )
    args_parser.add_argument(
        '-H', '--hostname-prefix',
        default='',
        help=u"Hostname prefix for ethers file."
        u"Not that the prefix is between the hostname and the description if available.",
    )
    args_parser.add_argument(
        '-N', '--name-prefix',
        default='',
        help=u"Name prefix for ethers file."
        u"This prefix is in front of the name even if a description is available.",
    )
    args_parser.add_argument(
        '-P', '--ip-prefix',
        default='',
        help=u"IP Address prefix for ethers file.",
    )
    args_parser.add_argument(
        '-n', '--no-hostname',
        action='store_true',
        default=False,
        help=u"Include entries for hosts with no hostnames.",
    )
    args = args_parser.parse_args()
    logger = logging.getLogger(__file__)
    logging.basicConfig(
        format='%(levelname)s: %(message)s',
        level=args.loglevel,
        # level=logging.DEBUG,
        # level=logging.INFO,
    )
    # }}}

    def signal_handler(signal, frame):
        print(u"\nGot SIGINT …")
        do_final_stuff()
        sys.exit(0)
    signal.signal(signal.SIGINT, signal_handler)

    n = NetworkTrafficParser(
        states_file=args.live,
        timeout=args.timeout,
    )

    if args.json_file:
        n.load_from_json(args.json_file)

    # if args.import_hosts:
    #     try:
    #         n.load_from_hosts_file(args.import_hosts)
    #     except:
    #         pass

    if args.interface:
        logging.info(u"Sniffing on {}.".format(args.interface))
        sniff(
            filter="udp and (port 67 or 68)",
            prn=n.parse,
            iface=args.interface
        )

    if args.file:
        sniff(
            filter="udp and (port 67 or 68)",
            prn=n.parse,
            offline=args.file
        )

    do_final_stuff()
# }}}
