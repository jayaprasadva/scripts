#!/usr/bin/env python
# encoding: utf-8
# @licence AGPL-3.0-only <https://www.gnu.org/licenses/agpl-3.0.html>
# @author Copyright (C) 2015 Robin Schneider <ypid@riseup.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, version 3 of the
# License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
Quick and dirty SSH login script intended for cisco routers and switches.
Tried rancid and other scripts but, well, they are old and did not really work.
"""

__version__ = '0.8'

import sys
import os
import re

import pexpect
from ConfigParser import ConfigParser


class SshExcept:
    _pexepct_password_re = '[Pp]assword:'
    _pexepct_hostname = r'\w+[>#]'
    _pexepct_hostname_priv = r'\w+#'
    _cisco_end_command = 'q'

    def __init__(
        self,
        hostname,
        user='admin',
        login_passwd='cisco',
        enable_passwd='cisco',
        command=None,
        interactive=False,
        timeout=10,
        logfile=None,
    ):

        self._hostname = hostname
        self._user = user
        self._login_passwd = login_passwd
        self._enable_passwd = enable_passwd
        self._command = command
        self._interactive = interactive
        self._timeout = timeout

        self._session = None

        if not logfile:
            self._logfile = sys.stdout
        else:
            self._logfile = open(logfile, 'a')

    def login(self):

        self._session = pexpect.spawn('ssh {0}'.format(self._hostname), timeout=self._timeout, logfile=self._logfile)
        index = self._session.expect([
            self._pexepct_password_re,
            'Are you sure you want to continue connecting (yes/no)?'
        ])
        if index == 1:
            self._session.sendline('yes')
            self._session.expect(self._pexepct_password_re)

        self._session.sendline(self._login_passwd)

        if self._session.expect([self._pexepct_hostname_priv, self._pexepct_hostname]) == 1:
            self._session.sendline('enable')
            self._session.expect(self._pexepct_password_re)
            self._session.sendline(self._enable_passwd)

        if self._command:
            self.run_commands(self._command)

        if self._interactive:
            self._session.interact()

    def run_commands(self, commands):

        for command in commands.split(';'):
            try:
                self._session.expect(self._pexepct_hostname, timeout=2)
            except pexpect.TIMEOUT:
                pass

            self._session.sendline(command)
            while True:
                try:
                    if self._session.expect([r' --More-- ', self._pexepct_hostname], timeout=5) == 0:
                        self._session.sendline(' ')
                    else:
                        break
                except pexpect.TIMEOUT:
                    self._session.sendline()

    def end(self):

        self._session.sendline(self._cisco_end_command)
        self._session.close()
        self._session.kill('SIGKILL')


def main(args):

    cfg = ConfigParser()
    cfg.read(args.config_file)

    for hostname in args.hostname:
        use_section = hostname

        for section in cfg.sections():
            if re.match(section, hostname):
                use_section = section

        user = cfg.get(use_section, 'user')
        passwd = cfg.get(use_section, 'passwd')

        if cfg.has_option(use_section, 'enable_passwd'):
            enable_passwd = cfg.get(use_section, 'enable_passwd')
        else:
            enable_passwd = passwd

        ssh_expect = SshExcept(
            hostname,
            user=user,
            login_passwd=passwd,
            enable_passwd=enable_passwd,
            command=args.command,
            interactive=args.interactive,
            timeout=args.timeout,
            logfile=args.logfile,
        )
        ssh_expect.login()
        ssh_expect.end()

if __name__ == '__main__':
    from argparse import ArgumentParser
    args = ArgumentParser(
        description=u"Run ssh through pexpect",
        epilog=__doc__
    )
    args.add_argument(
        '-V',
        '--version',
        action='version',
        version='%(prog)s {version}'.format(version=__version__)
    )
    args.add_argument(
        'hostname',
        nargs='+',
        help=u"hostname (is just passed to the ssh command)",
    )
    args.add_argument(
        '-i',
        '--interactive',
        action='store_true',
        default=False,
        help=u"Enter interactive mode"
        "(if an additional command is passed this command will be executed first).",
    )
    args.add_argument(
        '-e',
        '--enable',
        action='store_true',
        default=True,
        help=u"Get higher privileges via the 'enable' command.",
    )
    args.add_argument(
        '-c',
        '--command',
        help=u"Commands to run",
    )
    args.add_argument(
        '-l',
        '--logfile',
        help=u"Set logfile for command output.",
    )
    args.add_argument(
        '-t',
        '--timeout',
        type=int,
        default=10,
        help=u"Set timeout",
    )
    args.add_argument(
        '-f',
        '--config-file',
        default='{}/.config/ssh-pexpect.cfg'.format(os.environ['HOME']),
        help=u"Path to configuration file (default is ~/config/ssh-pexpect.cfg)",
    )
    user_parms = args.parse_args()

    main(user_parms)
