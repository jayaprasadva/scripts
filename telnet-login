#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# SPDX-FileCopyrightText: 2015 Robin Schneider <ypid@riseup.net>
#
# SPDX-License-Identifier: AGPL-3.0-only

"""
Telnet login script.
"""

__version__ = '0.9'

import pexpect
import socket


class TelnetLogin:
    _PEXEPCT_PASSWORD_RE = '[Pp]assword:'

    def __init__(
        self,
        hostname,
        port=23,
        login_passwd='password',
        command=None,
        interactive=False,
        timeout=10,
        logfile=None,
        logfile_buffered=True,
        log_to_socket=None,
    ):

        self._hostname = hostname
        self._port = port
        self._login_passwd = login_passwd
        self._command = command
        self._interactive = interactive
        self._timeout = timeout

        self._session = None

        self._logfile = None
        self._logfile_buffered = logfile_buffered
        if logfile:
            if self._logfile_buffered:
                self._logfile = open(logfile, 'a')
            else:
                self._logfile = open(logfile, 'a', 0)
            self._logfile.write(u'\n')

        self._log_to_socket = None
        if log_to_socket:
            self._log_to_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            log_to_socket_addr = log_to_socket.split(':')
            try:
                self._log_to_socket.connect(
                    (log_to_socket_addr[0], int(log_to_socket_addr[1]))
                )
            except socket.error as err:
                raise Exception(u"{}. You can use nc or ncat to listen on a socket like this: 'nc -l 23'.".format(err))

    def login(self):

        self._session = pexpect.spawn(
            'telnet {0} {1}'.format(self._hostname, self._port),
            timeout=self._timeout,
        )
        self._session.expect(self._PEXEPCT_PASSWORD_RE)
        self._session.sendline(self._login_passwd)

        if self._command:
            self.run_commands(self._command)

        if self._interactive:
            self._session.interact(
                input_filter=self._input_filter
            )

    def _write_to_logfile(self, content):
        if self._logfile:
            self._logfile.write(content)
        if self._log_to_socket:
            self._log_to_socket.send(content)

    def _input_filter(self, user_input):
        if user_input == '\n':
            self._write_to_logfile(u'\nhellp')
        else:
            self._write_to_logfile(user_input)
        return user_input

    def run_commands(self, commands):
        self._write_to_logfile(commands)
        self._session.sendline(commands)

    def end(self):

        # self._session.sendline('^D')
        self._session.close()
        self._session.kill('SIGKILL')


def main(args):

    telnet = TelnetLogin(
        args.hostname,
        port=args.port,
        login_passwd=args.password,
        command=args.command,
        interactive=not args.no_interactive,
        timeout=args.timeout,
        logfile=args.logfile,
        logfile_buffered=args.logfile_buffered,
        log_to_socket=args.log_to_socket,
    )
    telnet.login()
    telnet.end()


if __name__ == '__main__':
    from argparse import ArgumentParser
    args = ArgumentParser(
        description=u"Autologin for telnet.",
        epilog=__doc__,
    )
    args.add_argument(
        '-V',
        '--version',
        action='version',
        version='%(prog)s {version}'.format(version=__version__),
    )
    args.add_argument(
        'hostname',
        help=u"hostname (is just passed to the ssh command)",
    )
    args.add_argument(
        '-p',
        '--port',
        help=u"tcp Port on which telnet is listening.",
    )
    args.add_argument(
        '-n',
        '--no-interactive',
        action='store_true',
        default=False,
        help=u"Not enter interactive mode.",
    )
    args.add_argument(
        '-c',
        '--command',
        help=u"Commands to run",
    )
    args.add_argument(
        '-P',
        '--password',
        help=u"Telnet password.",
    )
    args.add_argument(
        '-l',
        '--logfile',
        help=u"Set logfile for line input.",
    )
    args.add_argument(
        '-s',
        '--log-to-socket',
        help=u"Send input to the given tcp socket. Example is localhost:2342.",
    )
    args.add_argument(
        '-f',
        '--logfile-buffered',
        action='store_true',
        default=False,
        help=u"By default (for this script), no buffer is being used for the log file."
        u" This option enables buffered writes again.",
    )
    args.add_argument(
        '-t',
        '--timeout',
        type=int,
        default=10,
        help=u"Set timeout",
    )
    user_parms = args.parse_args()

    main(user_parms)
